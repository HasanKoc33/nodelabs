import 'package:easy_localization/easy_localization.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:nodelabs/core/di/injection.dart';import 'package:nodelabs/core/services/firebase_service.dart';import 'package:nodelabs/core/services/logger_service.dart';import 'package:nodelabs/domain/entities/movie.dart';import 'package:nodelabs/presentation/bloc/movies/movies_bloc.dart';import 'package:nodelabs/presentation/bloc/movies/movies_event.dart';/// HomeMovieWidget ekranı@immutablefinal class HomeMovieWidget extends StatelessWidget {  /// HomeMovieWidget yapıcı methot  const HomeMovieWidget({    required this.movie,    required this.loadingFavorites,    required this.logger,    required this.onFavoriteToggled,    super.key,  });  /// Movie modelini alır  final Movie movie;  /// Favorilere eklenme işlemi sırasında yükleme durumunu tutan set  final Set<String> loadingFavorites;  /// Logger servisi  final LoggerService logger;  /// ana favori listesinin callback'ini alır  final VoidCallback onFavoriteToggled;  @override  Widget build(BuildContext context) {    return Stack(      fit: StackFit.expand,      children: [        if (movie.posterPath != null && movie.posterPath!.isNotEmpty)          Image.network(            movie.finalPosterPath,            fit: BoxFit.cover,            errorBuilder:                (context, error, stackTrace) =>                    Container(color: Colors.black12),          )        else          Container(color: Colors.black26),        // Overlay gradient for readability        Container(          decoration: const BoxDecoration(            gradient: LinearGradient(              begin: Alignment.topCenter,              end: Alignment.bottomCenter,              colors: [Colors.transparent, Colors.black87],              stops: [0.4, 1.0],            ),          ),        ),        Positioned(          left: 24,          right: 24,          bottom: 10,          child: Column(            crossAxisAlignment: CrossAxisAlignment.start,            mainAxisSize: MainAxisSize.min,            children: [              ListTile(                contentPadding: EdgeInsets.only(bottom: 30),                trailing: Container(                  padding: const EdgeInsets.symmetric(                    horizontal: 8,                    vertical: 16,                  ),                  decoration: BoxDecoration(                    color: Colors.black.withAlpha(600),                    borderRadius: BorderRadius.circular(20),                    border: Border.all(color: Colors.white.withAlpha(300)),                  ),                  child: GestureDetector(                    onTap:                    loadingFavorites.contains(movie.id)                        ? null                        : () {                      // Add to loading set                      onFavoriteToggled();                      loadingFavorites.add(movie.id);                      context.read<MoviesBloc>().add(                        MoviesFavoriteToggled(movie),                      );                      // Log analytics event                      try {                        getIt<FirebaseService>().logMovieFavorite(                          movie.id,                          movie.title,                          !movie.isFavorite,                        );                      } on Exception catch (e) {                        // Firebase service not available                        logger.error(                          'Firebase service not available',                          e,                        );                      }                      // Show immediate feedback                      ScaffoldMessenger.of(context).showSnackBar(                        SnackBar(                          content: Text(                            movie.isFavorite == true                                ? 'movie.removingFromFavorites'.tr()                                : 'movie.addingToFavorites'.tr(),                          ),                          backgroundColor: Colors.orange,                          duration: const Duration(milliseconds: 800),                        ),                      );                    },                    child:                    loadingFavorites.contains(movie.id)                        ? const SizedBox(                      width: 24,                      height: 24,                      child: CircularProgressIndicator(                        strokeWidth: 2,                        valueColor: AlwaysStoppedAnimation<Color>(                          Colors.white,                        ),                      ),                    )                        : Icon(                      movie.isFavorite == true                          ? Icons.favorite                          : Icons.favorite_border,                      color:                      movie.isFavorite == true                          ? Colors.redAccent                          : Colors.white,                      size: 24,                    ),                  ),                ),              ),              Text(                movie.title,                style: const TextStyle(                  color: Colors.white,                  fontSize: 28,                  fontWeight: FontWeight.bold,                  shadows: [                    Shadow(                      color: Colors.black54,                      offset: Offset(0, 2),                      blurRadius: 8,                    ),                  ],                ),                maxLines: 2,                overflow: TextOverflow.ellipsis,              ),              const SizedBox(height: 8),              if (movie.overview != null && movie.overview!.isNotEmpty)                Text(                  movie.overview!,                  style: const TextStyle(                    color: Colors.white70,                    fontSize: 14,                    shadows: [                      Shadow(                        color: Colors.black54,                        offset: Offset(0, 1),                        blurRadius: 4,                      ),                    ],                  ),                  maxLines: 3,                  overflow: TextOverflow.ellipsis,                ),            ],          ),        ),      ],    );  }}